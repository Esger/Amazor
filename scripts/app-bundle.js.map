{"version":3,"sources":["app.js","environment.js","main.js","components/board.js","components/maze.js","resources/index.js"],"names":["App","eventAggregator","handleKeyInput","event","keycode","keyCode","which","listen2keys","keys","left","ea","publish","up","right","down","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","BoardCustomElement","MazeCustomElement","cells","width","height","subscribe","move","response","direction","step","x","y","console","log","wallClass","cell","join","newMaze","totalCells","Array","unvis","i","j","currentCell","Math","floor","random","path","visited","pot","neighbors","l","push","length","next","pop","attached"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\n\nexport class App {\n\n    constructor(eventAggregator) {\n        this.keys = {\n            'left': 37,\n            'up': 38,\n            'right': 39,\n            'down': 40\n        };\n    }\n\n    handleKeyInput = (event) => {\n        var keycode = event.keyCode || event.which; // also for cross-browser compatible\n        if (this.listen2keys) {\n            switch (keycode) {\n                case this.keys.left:\n                    this.ea.publish('keyPressed', \"left\");\n                    break;\n                case this.keys.up:\n                    this.ea.publish('keyPressed', \"up\");\n                    break;\n                case this.keys.right:\n                    this.ea.publish('keyPressed', \"right\");\n                    break;\n                case this.keys.down:\n                    this.ea.publish('keyPressed', \"down\");\n                    break;\n                default:\n                    this.ea.publish('keyPressed', \"somekey\");\n            }\n        }\n    }\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class BoardCustomElement {\n\n    constructor(eventAggregator) {\n    }\n\n}\n","import {\n    inject,\n    bindable\n} from 'aurelia-framework';\nimport {\n    EventAggregator\n} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class MazeCustomElement {\n\n    constructor(eventAggregator) {\n        this.cells = [];\n        this.width = 20;\n        this.height = 20;\n        this.ea = eventAggregator;\n        this.ea.subscribe('keyPressed', response => {\n            this.move(response);\n        });\n    }\n\n    move(direction) {\n        switch (direction) {\n            case 'left':\n                this.step(-1, 0);\n                break;\n            case 'right':\n                this.step(1, 0);\n                break;\n            case 'up':\n                this.step(0, -1);\n                break;\n            case 'down':\n                this.step(0, 1);\n                break;\n            default:\n        }\n    }\n\n    step(x, y) {\n        console.log({ x, y });\n    }\n\n    wallClass(cell) {\n        return 'wall' + cell.join('');\n    }\n\n    newMaze(x, y) {\n        // Thanks to https://github.com/dstromberg2/maze-generator\n\n        // Establish variables and starting grid\n        let totalCells = x * y;\n        let cells = new Array();\n        let unvis = new Array();\n        for (let i = 0; i < y; i++) {\n            cells[i] = new Array();\n            unvis[i] = new Array();\n            for (let j = 0; j < x; j++) {\n                cells[i][j] = [1, 1, 1, 1];\n                unvis[i][j] = true;\n            }\n        }\n\n        // Set a random position to start from\n        let currentCell = [Math.floor(Math.random() * y), Math.floor(Math.random() * x)];\n        let path = [currentCell];\n        unvis[currentCell[0]][currentCell[1]] = false;\n        let visited = 1;\n\n        // Loop through all available cell positions\n        while (visited < totalCells) {\n            // Determine neighboring cells\n            let pot = [[currentCell[0] - 1, currentCell[1], 0, 2],\n            [currentCell[0], currentCell[1] + 1, 1, 3],\n            [currentCell[0] + 1, currentCell[1], 2, 0],\n            [currentCell[0], currentCell[1] - 1, 3, 1]];\n            let neighbors = new Array();\n\n            // Determine if each neighboring cell is in game grid, and whether it has already been checked\n            for (let l = 0; l < 4; l++) {\n                if (pot[l][0] > -1 && pot[l][0] < y && pot[l][1] > -1 && pot[l][1] < x && unvis[pot[l][0]][pot[l][1]]) { neighbors.push(pot[l]); }\n            }\n\n            // If at least one active neighboring cell has been found\n            if (neighbors.length) {\n                // Choose one of the neighbors at random\n                let next = neighbors[Math.floor(Math.random() * neighbors.length)];\n\n                // Remove the wall between the current cell and the chosen neighboring cell\n                cells[currentCell[0]][currentCell[1]][next[2]] = 0;\n                cells[next[0]][next[1]][next[3]] = 0;\n\n                // Mark the neighbor as visited, and set it as the current cell\n                unvis[next[0]][next[1]] = false;\n                visited++;\n                currentCell = [next[0], next[1]];\n                path.push(currentCell);\n            }\n            // Otherwise go back up a step and keep going\n            else {\n                currentCell = path.pop();\n            }\n        }\n        return cells;\n    }\n\n    attached() {\n        this.cells = this.newMaze(this.width, this.height);\n    }\n\n\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}